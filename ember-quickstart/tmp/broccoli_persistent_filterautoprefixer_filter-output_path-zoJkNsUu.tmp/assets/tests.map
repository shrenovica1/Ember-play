{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-quickstart/tests/app.lint-test.js","ember-quickstart/tests/helpers/destroy-app.js","ember-quickstart/tests/helpers/ember-basic-dropdown.js","ember-quickstart/tests/helpers/ember-power-select.js","ember-quickstart/tests/helpers/module-for-acceptance.js","ember-quickstart/tests/helpers/resolver.js","ember-quickstart/tests/helpers/start-app.js","ember-quickstart/tests/integration/components/people-list-test.js","ember-quickstart/tests/integration/components/popular-locations-test.js","ember-quickstart/tests/integration/components/popular-restaurants-test.js","ember-quickstart/tests/integration/components/restaurant-search-test.js","ember-quickstart/tests/integration/components/single-restaurant-popular-test.js","ember-quickstart/tests/test-helper.js","ember-quickstart/tests/tests.lint-test.js","ember-quickstart/tests/unit/controllers/popular-restaurants-test.js","ember-quickstart/tests/unit/controllers/signup-test.js","ember-quickstart/tests/unit/controllers/singup-test.js","ember-quickstart/tests/unit/controllers/user-controller-test.js","ember-quickstart/tests/unit/routes/home-test.js","ember-quickstart/tests/unit/routes/index-test.js","ember-quickstart/tests/unit/routes/popular-restaurants-test.js","ember-quickstart/tests/unit/routes/programmers-test.js","ember-quickstart/tests/unit/routes/scientists-test.js","ember-quickstart/tests/unit/routes/singin-test.js","ember-quickstart/tests/unit/routes/singup-test.js","ember-quickstart/tests/unit/services/ajax-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-quickstart/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/people-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/people-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/popular-locations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/popular-locations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/popular-restaurants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/popular-restaurants.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/restaurant-search.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/restaurant-search.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/single-restaurant-popular.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/single-restaurant-popular.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/popular-restaurants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/popular-restaurants.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/singup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/singup.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/popular-restaurants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/popular-restaurants.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/scientists.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/scientists.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/singin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/singin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/singup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/singup.js should pass ESLint\\n\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n9:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('services/ajax.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ajax.js should pass ESLint\\n\\n');\n  });\n});","define('ember-quickstart/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('ember-quickstart/tests/helpers/ember-basic-dropdown', ['exports', 'ember-basic-dropdown/test-support/helpers', 'ember-native-dom-helpers'], function (exports, _helpers, _emberNativeDomHelpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.nativeClick = exports.fireKeydown = exports.tapTrigger = exports.clickTrigger = exports.nativeTap = undefined;\n  Object.defineProperty(exports, 'nativeTap', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTap;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'tapTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.tapTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'fireKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.fireKeydown;\n    }\n  });\n  exports.default = _helpers.default;\n  var nativeClick = exports.nativeClick = _emberNativeDomHelpers.click;\n});","define('ember-quickstart/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  Object.defineProperty(exports, 'findContains', {\n    enumerable: true,\n    get: function () {\n      return _helpers.findContains;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseDown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseDown;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseUp', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseUp;\n    }\n  });\n  Object.defineProperty(exports, 'triggerKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.triggerKeydown;\n    }\n  });\n  Object.defineProperty(exports, 'typeInSearch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.typeInSearch;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'nativeTouch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTouch;\n    }\n  });\n  Object.defineProperty(exports, 'touchTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.touchTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'selectChoose', {\n    enumerable: true,\n    get: function () {\n      return _helpers.selectChoose;\n    }\n  });\n  exports.default = _helpers.default;\n});","define('ember-quickstart/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember-quickstart/tests/helpers/start-app', 'ember-quickstart/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('ember-quickstart/tests/helpers/resolver', ['exports', 'ember-quickstart/resolver', 'ember-quickstart/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('ember-quickstart/tests/helpers/start-app', ['exports', 'ember-quickstart/app', 'ember-quickstart/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('ember-quickstart/tests/integration/components/people-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('people-list', 'Integration | Component | people list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"SDbmOAjD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"people-list\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mhwqehad\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"people-list\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-quickstart/tests/integration/components/popular-locations-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('popular-locations', 'Integration | Component | popular locations', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"iExEu84s\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"popular-locations\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Zan1DHvl\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"popular-locations\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-quickstart/tests/integration/components/popular-restaurants-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('popular-restaurants', 'Integration | Component | popular restaurants', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mYtTqbmX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"popular-restaurants\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4nh2N/Op\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"popular-restaurants\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-quickstart/tests/integration/components/restaurant-search-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('restaurant-search', 'Integration | Component | restaurant search', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PJCRHKAq\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"restaurant-search\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+qQzJpqh\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"restaurant-search\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-quickstart/tests/integration/components/single-restaurant-popular-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('single-restaurant-popular', 'Integration | Component | single restaurant popular', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VhLlzSfJ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"single-restaurant-popular\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"muhyW/xV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"single-restaurant-popular\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-quickstart/tests/test-helper', ['ember-quickstart/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('ember-quickstart/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/people-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/people-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/popular-locations-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/popular-locations-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/popular-restaurants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/popular-restaurants-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/restaurant-search-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/restaurant-search-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/single-restaurant-popular-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/single-restaurant-popular-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/popular-restaurants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/popular-restaurants-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/signup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/signup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/singup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/singup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/user-controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/user-controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/popular-restaurants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/popular-restaurants-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/programmers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/programmers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/scientists-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/scientists-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/singin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/singin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/singup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/singup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/ajax-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ajax-test.js should pass ESLint\\n\\n');\n  });\n});","define('ember-quickstart/tests/unit/controllers/popular-restaurants-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:popular-restaurants', 'Unit | Controller | popular restaurants', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-quickstart/tests/unit/controllers/signup-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:signup', 'Unit | Controller | signup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-quickstart/tests/unit/controllers/singup-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:singup', 'Unit | Controller | singup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-quickstart/tests/unit/controllers/user-controller-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:user-controller', 'Unit | Controller | user controller', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-quickstart/tests/unit/routes/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-quickstart/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-quickstart/tests/unit/routes/popular-restaurants-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:popular-restaurants', 'Unit | Route | popular restaurants', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-quickstart/tests/unit/routes/programmers-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:programmers', 'Unit | Route | programmers', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-quickstart/tests/unit/routes/scientists-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:scientists', 'Unit | Route | scientists', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-quickstart/tests/unit/routes/singin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:singin', 'Unit | Route | singin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-quickstart/tests/unit/routes/singup-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:singup', 'Unit | Route | singup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-quickstart/tests/unit/services/ajax-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('ember-quickstart/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}